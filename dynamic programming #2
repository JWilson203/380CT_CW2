from random import randint, sample
from itertools import chain, combinations
from time import time

class SSP():
    def __init__(self, S=[], t=0):
        self.S = S
        self.t = t
        self.n = len(S)
        #
        self.decision = False
        self.total    = 0
        self.selected = []

    def __repr__(self):
        return "SSP instance: S="+str(self.S)+"\tt="+str(self.t)
    
    def random_instance(self, n, bitlength=10):
        max_n_bit_number = 2**bitlength-1
        self.S = sorted( [ randint(0,max_n_bit_number) for i in range(n) ] , reverse=True)
        self.t = randint(0,n*max_n_bit_number)
        self.n = len( self.S )

    def random_yes_instance(self, n, bitlength=10):
        max_n_bit_number = 2**bitlength-1
        self.S = sorted( [ randint(0,max_n_bit_number) for i in range(n) ] , reverse=True)
        self.t = sum( sample(self.S, randint(0,n)) )
        self.n = len( self.S )

    ###

    def try_at_random(self):
        candidate = []
        total = 0
        while total != self.t:
            candidate = sample(self.S, randint(0,self.n))
            total     = sum(candidate)
            print( "Trying: ", candidate, ", sum:", total )


    def isSubsetSum(set, n, sum):
        s = set
        n = self.n
        s = sum

        #base case
        #if the sum is 0 we can use the empty set as our solution.
        if (sum == 0):
            print ("true")
            return True
        #if the subset is empty then we cannot make a solution
        if (n== 0 and sum !=0):
            print ("false")
            return False

        #iff last element is greater than sum, then ignore it
        if (set[n-1] > sum):
            return isSubsetsum(set, n-1, sum)
        else:
            return isSubsetSum(set, n-1, sum) or isSubsetSum(set, n-1, sum-set[n-1])
        
        


            

instance = SSP()
instance.random_yes_instance(4)
print( instance )

instance.try_at_random()
